(* vim: set syntax=ocaml: *)

(* Simple example with 3 nodes u, v, and d,
 * where each node is in its own partition,
 * and each node maintains its distance from the other nodes.
 *)

type attribute = (int, int, int)

let nodes = 3

(* u -/- v -- d *)
(* 2 -/- 1 -- 0 *)

(* 0 = d
 * 1 = v
 * 2 = u
 *)
let edges = {
  0=1;
  1=2;
}

(* Merge *)
let min x y = if x < y then x else y

let merge n x y =
    let (ax, bx, cx) = x in
    let (ay, by, cy) = y in
    (min ax ay, min bx by, min cx cy)

(* Transfer *)
let trans edge x = let (a, b, c) = x in (a + 1, b + 1, c + 1)

(* Init *)
let init n = match n with
  | 0n -> (0, 15, 15)
  | 1n -> (15, 0, 15)
  | 2n -> (15, 15, 0)

(* Partition *)
let partition node = match node with
  | 0n -> 0u8
  | 1n -> 1u8
  | 2n -> 2u8

let interface edge =
  let le x y =
    let (ax, bx, cx) = x in
    let (ay, by, cy) = y in
    ax <= ay && bx <= by && cx <= cy
  in
  match edge with
  | 0~1 -> Some (fun x -> le x (0, 15, 15))
  | 1~0 -> Some (fun x -> le x (15, 0, 1))
  | 1~2 -> Some (fun x -> le x (1, 0, 15))
  | 2~1 -> Some (fun x -> le x (15, 15, 0))

let assert node x = let (a, b, c) = x in a < 3 && b < 2 && c < 3
